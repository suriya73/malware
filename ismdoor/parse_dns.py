# input file was created with the following tshark command:
# tshark -nr dns_comms.pcapng -Y "dns.qry.name contains dnslookup && dns.flags.response == 1" -T fields -e dns.qry.name -e dns.aaaa

import base64
import collections
import io
import re
import sys
import zipfile


def parse_lines(line, sessions):
    query, response = line.strip("\n").split("\t")
    pieces = query.split(".")
    session_id = pieces[3]

    if session_id not in sessions:
        sessions[session_id] = []

    sessions[session_id].append({"query": query, "response": response})

    return sessions


def parse_session(count, session):
    print "session #%d" % count

    file_buf = None
    for req in session:
        pieces = req["query"].split(".")
        response = req["response"].replace(":", "").upper()
        
        # standard session requests
        # 1 establish session id
        if req["query"].startswith("n.n.c."):
            print "session id: %s" % pieces[3]

            if response != "A67DDB8A2A17334765443253702AA3":
                print "unexpected establish session id response: %s" % response

        # 2 send msg to c2
        elif ".dr." in req["query"]:
            msg = decrypt_msg(pieces[0])
            print "send msg %d to c2: %s" % (int(pieces[1]), msg)

            if response != "A67DDB885A3432576548A2A3707334":
                print "unexpected send msg to c2 response: %s" % response

        # 3 send msg count to c2
        elif re.search(r"n\.[0-9]+\.f\.", req["query"]):
            print "sent %d msgs to c2" % int(pieces[1])

            if response != "20202020202020202020202020202020":
                print "unexpected send msg count to c2 response: %s" % response

        # 4 get msg count from c2
        elif req["query"].startswith("n.n.fc."):
            msg_count = 0

            if response == "A67DDB885A3432576548A2A1111":
                print "unknown response from c2: %s" % response

            elif response.startswith("A67DDB885A3432576548A2A"):
                msg_count = int(response[len("A67DDB885A3432576548A2A"):])
                print "expecting %d msgs from c2" % msg_count

            else:
                print "unexpected msg count from c2 response: %s" % response

        # 5 get msg from c2
        elif req["query"].startswith("www."):
            hex_decoded = response.decode("hex")
            print "recv msg %d from c2: %s (%s)" % (int(pieces[1]), response, hex_decoded)

        # send file msg count
        elif re.search(r"n\.[0-9]+\.c\.", req["query"]):
            msg_count = int(pieces[1])
            print "session id: %s" % pieces[3]
            print "send file msg count (%d) to c2" % msg_count

            file_buf = [None]*msg_count

        # send file
        elif re.search(r"\.[0-9]+\.d\.", req["query"]):
            msg_count = int(pieces[1])
            msg = decrypt_msg(pieces[0])
            print "send file msg %d to c2" % msg_count

            file_buf[msg_count] = msg

        # resend missing file msg
        elif re.search(r"\.[0-9]+\.dl\.", req["query"]):
            msg_count = int(pieces[1])
            msg = decrypt_msg(pieces[0])
            print "resending file msg %d to c2" % msg_count

            file_buf[msg_count] = msg

        # ask c2 for missing file msgs
        elif re.search(r"uff[0-9]+\.[0-9]+\.f\.", req["query"]):
            print "ask c2 for missing file msgs"

        else:
            print "unparsed query: %s" % req["query"]

    if file_buf:
        print "file transferred"

        if None in file_buf:
            print "incomplete file"
        else:
          file_buf = "".join(file_buf)
          if file_buf.startswith("PK"):
              print "unzipping file"

              zip = zipfile.ZipFile(io.BytesIO(file_buf))
              print zip.read(zip.namelist()[0])

          else:
              print file_buf


def decrypt_msg(encbuf):
    encbuf = encbuf.replace("!", "=")
    encbuf = encbuf.replace("&", "/")
    encbuf = encbuf.replace("@", "+")

    plainbuf = base64.b64decode(encbuf)

    return plainbuf


if __name__ == "__main__":
    fp = open(sys.argv[1], "rb")
    lines = fp.readlines()
    fp.close()

    sessions = collections.OrderedDict()
    for line in lines:
        sessions = parse_lines(line, sessions)

    print "%d sessions" % len(sessions)

    for count, session in enumerate(sessions.itervalues()):
        print "-"*80
        parse_session(count, session)
